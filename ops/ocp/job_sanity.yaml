kind: Job
apiVersion: batch/v1
metadata:
  creationTimestamp: null
  name: s3pp-sanity
  labels:
    mode: standalone
spec:
  backoffLimit: 6
  completions: 1
  parallelism: 1
  template:
    metadata:
      creationTimestamp: null
      labels:
        job-name: s3pp-sanity
        mode: standalone
    spec:
      containers:
      - name: s3pp-sanity-upload
        image: image-registry.openshift-image-registry.svc:5000/insights-qe-dev/s3-pull-processor
        command:
          - bash
          - '-c'
          - s3-pull-processor upload -p /tmp/fake-artifact-file.tar -f
        env:
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: AWS_ACCESS_KEY_ID
                name: awscreds
          - name: AWS_DEFAULT_REGION
            valueFrom:
              secretKeyRef:
                key: AWS_DEFAULT_REGION
                name: awscreds
          - name: AWS_S3_SECURE_CONNECTION
            valueFrom:
              secretKeyRef:
                key: AWS_S3_SECURE_CONNECTION
                name: awscreds
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: AWS_SECRET_ACCESS_KEY
                name: awscreds
      - name: s3pp-sanity-pull
        image: image-registry.openshift-image-registry.svc:5000/insights-qe-dev/s3-pull-processor
        command:
          - bash
          - '-c'
          - echo 'sleeping 60s' && sleep 60 && s3-pull-processor pull
        env:
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: AWS_ACCESS_KEY_ID
                name: awscreds
          - name: AWS_DEFAULT_REGION
            valueFrom:
              secretKeyRef:
                key: AWS_DEFAULT_REGION
                name: awscreds
          - name: AWS_S3_SECURE_CONNECTION
            valueFrom:
              secretKeyRef:
                key: AWS_S3_SECURE_CONNECTION
                name: awscreds
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: AWS_SECRET_ACCESS_KEY
                name: awscreds
        imagePullPolicy: IfNotPresent
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Never
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
